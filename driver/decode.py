import pwn
import bitarray
from math import cos, pi

s_lumin_dc_tree = []
s_lumin_dc = [
    [2, 0x0000],  # 00 #
    [3, 0x0002],  # 010 #
    [3, 0x0003],  # 011 #
    [3, 0x0004],  # 100 #
    [3, 0x0005],  # 101 #
    [3, 0x0006],  # 110 #
    [4, 0x000e],  # 1110 #
    [5, 0x001e],  # 11110 #
    [6, 0x003e],  # 111110 #
    [7, 0x007e],  # 1111110 #
    [8, 0x00fe],  # 11111110 #
    [9, 0x01fe]  # 111111110 #
]
s_chrom_dc_tree = []
s_chrom_dc = [
    [2, 0x0000],  # 00 #
    [2, 0x0001],  # 01 #
    [2, 0x0002],  # 10 #
    [3, 0x0006],  # 110 #
    [4, 0x000e],  # 1110 #
    [5, 0x001e],  # 11110 #
    [6, 0x003e],  # 111110 #
    [7, 0x007e],  # 1111110 #
    [8, 0x00fe],  # 11111110 #
    [9, 0x01fe],  # 111111110 #
    [10, 0x03fe],  # 1111111110 #
    [11, 0x07fe]  # 11111111110 #
]
s_lumin_ac_tree = []
s_lumin_ac = [

    [4, 0x000a],  # 0x00:              1010 #
    [2, 0x0000],  # 0x01:                00 #
    [2, 0x0001],  # 0x02:                01 #
    [3, 0x0004],  # 0x03:               100 #
    [4, 0x000b],  # 0x04:              1011 #
    [5, 0x001a],  # 0x05:             11010 #
    [7, 0x0078],  # 0x06:           1111000 #
    [8, 0x00f8],  # 0x07:          11111000 #
    [10, 0x03f6],  # 0x08:        1111110110 #
    [16, 0xff82],  # 0x09:  1111111110000010 #
    [16, 0xff83],  # 0x0a:  1111111110000011 #
    [0, 0x0000],  # 0x0b:                   #
    [0, 0x0000],  # 0x0c:                   #
    [0, 0x0000],  # 0x0d:                   #
    [0, 0x0000],  # 0x0e:                   #
    [0, 0x0000],  # 0x0f:                   #
    [0, 0x0000],  # 0x10:                   #
    [4, 0x000c],  # 0x11:              1100 #
    [5, 0x001b],  # 0x12:             11011 #
    [7, 0x0079],  # 0x13:           1111001 #
    [9, 0x01f6],  # 0x14:         111110110 #
    [11, 0x07f6],  # 0x15:       11111110110 #
    [16, 0xff84],  # 0x16:  1111111110000100 #
    [16, 0xff85],  # 0x17:  1111111110000101 #
    [16, 0xff86],  # 0x18:  1111111110000110 #
    [16, 0xff87],  # 0x19:  1111111110000111 #
    [16, 0xff88],  # 0x1a:  1111111110001000 #
    [0, 0x0000],  # 0x1b:                   #
    [0, 0x0000],  # 0x1c:                   #
    [0, 0x0000],  # 0x1d:                   #
    [0, 0x0000],  # 0x1e:                   #
    [0, 0x0000],  # 0x1f:                   #
    [0, 0x0000],  # 0x20:                   #
    [5, 0x001c],  # 0x21:             11100 #
    [8, 0x00f9],  # 0x22:          11111001 #
    [10, 0x03f7],  # 0x23:        1111110111 #
    [12, 0x0ff4],  # 0x24:      111111110100 #
    [16, 0xff89],  # 0x25:  1111111110001001 #
    [16, 0xff8a],  # 0x26:  1111111110001010 #
    [16, 0xff8b],  # 0x27:  1111111110001011 #
    [16, 0xff8c],  # 0x28:  1111111110001100 #
    [16, 0xff8d],  # 0x29:  1111111110001101 #
    [16, 0xff8e],  # 0x2a:  1111111110001110 #
    [0, 0x0000],  # 0x2b:                   #
    [0, 0x0000],  # 0x2c:                   #
    [0, 0x0000],  # 0x2d:                   #
    [0, 0x0000],  # 0x2e:                   #
    [0, 0x0000],  # 0x2f:                   #
    [0, 0x0000],  # 0x30:                   #
    [6, 0x003a],  # 0x31:            111010 #
    [9, 0x01f7],  # 0x32:         111110111 #
    [12, 0x0ff5],  # 0x33:      111111110101 #
    [16, 0xff8f],  # 0x34:  1111111110001111 #
    [16, 0xff90],  # 0x35:  1111111110010000 #
    [16, 0xff91],  # 0x36:  1111111110010001 #
    [16, 0xff92],  # 0x37:  1111111110010010 #
    [16, 0xff93],  # 0x38:  1111111110010011 #
    [16, 0xff94],  # 0x39:  1111111110010100 #
    [16, 0xff95],  # 0x3a:  1111111110010101 #
    [0, 0x0000],  # 0x3b:                   #
    [0, 0x0000],  # 0x3c:                   #
    [0, 0x0000],  # 0x3d:                   #
    [0, 0x0000],  # 0x3e:                   #
    [0, 0x0000],  # 0x3f:                   #
    [0, 0x0000],  # 0x40:                   #
    [6, 0x003b],  # 0x41:            111011 #
    [10, 0x03f8],  # 0x42:        1111111000 #
    [16, 0xff96],  # 0x43:  1111111110010110 #
    [16, 0xff97],  # 0x44:  1111111110010111 #
    [16, 0xff98],  # 0x45:  1111111110011000 #
    [16, 0xff99],  # 0x46:  1111111110011001 #
    [16, 0xff9a],  # 0x47:  1111111110011010 #
    [16, 0xff9b],  # 0x48:  1111111110011011 #
    [16, 0xff9c],  # 0x49:  1111111110011100 #
    [16, 0xff9d],  # 0x4a:  1111111110011101 #
    [0, 0x0000],  # 0x4b:                   #
    [0, 0x0000],  # 0x4c:                   #
    [0, 0x0000],  # 0x4d:                   #
    [0, 0x0000],  # 0x4e:                   #
    [0, 0x0000],  # 0x4f:                   #
    [0, 0x0000],  # 0x50:                   #
    [7, 0x007a],  # 0x51:           1111010 #
    [11, 0x07f7],  # 0x52:       11111110111 #
    [16, 0xff9e],  # 0x53:  1111111110011110 #
    [16, 0xff9f],  # 0x54:  1111111110011111 #
    [16, 0xffa0],  # 0x55:  1111111110100000 #
    [16, 0xffa1],  # 0x56:  1111111110100001 #
    [16, 0xffa2],  # 0x57:  1111111110100010 #
    [16, 0xffa3],  # 0x58:  1111111110100011 #
    [16, 0xffa4],  # 0x59:  1111111110100100 #
    [16, 0xffa5],  # 0x5a:  1111111110100101 #
    [0, 0x0000],  # 0x5b:                   #
    [0, 0x0000],  # 0x5c:                   #
    [0, 0x0000],  # 0x5d:                   #
    [0, 0x0000],  # 0x5e:                   #
    [0, 0x0000],  # 0x5f:                   #
    [0, 0x0000],  # 0x60:                   #
    [7, 0x007b],  # 0x61:           1111011 #
    [12, 0x0ff6],  # 0x62:      111111110110 #
    [16, 0xffa6],  # 0x63:  1111111110100110 #
    [16, 0xffa7],  # 0x64:  1111111110100111 #
    [16, 0xffa8],  # 0x65:  1111111110101000 #
    [16, 0xffa9],  # 0x66:  1111111110101001 #
    [16, 0xffaa],  # 0x67:  1111111110101010 #
    [16, 0xffab],  # 0x68:  1111111110101011 #
    [16, 0xffac],  # 0x69:  1111111110101100 #
    [16, 0xffad],  # 0x6a:  1111111110101101 #
    [0, 0x0000],  # 0x6b:                   #
    [0, 0x0000],  # 0x6c:                   #
    [0, 0x0000],  # 0x6d:                   #
    [0, 0x0000],  # 0x6e:                   #
    [0, 0x0000],  # 0x6f:                   #
    [0, 0x0000],  # 0x70:                   #
    [8, 0x00fa],  # 0x71:          11111010 #
    [12, 0x0ff7],  # 0x72:      111111110111 #
    [16, 0xffae],  # 0x73:  1111111110101110 #
    [16, 0xffaf],  # 0x74:  1111111110101111 #
    [16, 0xffb0],  # 0x75:  1111111110110000 #
    [16, 0xffb1],  # 0x76:  1111111110110001 #
    [16, 0xffb2],  # 0x77:  1111111110110010 #
    [16, 0xffb3],  # 0x78:  1111111110110011 #
    [16, 0xffb4],  # 0x79:  1111111110110100 #
    [16, 0xffb5],  # 0x7a:  1111111110110101 #
    [0, 0x0000],  # 0x7b:                   #
    [0, 0x0000],  # 0x7c:                   #
    [0, 0x0000],  # 0x7d:                   #
    [0, 0x0000],  # 0x7e:                   #
    [0, 0x0000],  # 0x7f:                   #
    [0, 0x0000],  # 0x80:                   #
    [9, 0x01f8],  # 0x81:         111111000 #
    [15, 0x7fc0],  # 0x82:   111111111000000 #
    [16, 0xffb6],  # 0x83:  1111111110110110 #
    [16, 0xffb7],  # 0x84:  1111111110110111 #
    [16, 0xffb8],  # 0x85:  1111111110111000 #
    [16, 0xffb9],  # 0x86:  1111111110111001 #
    [16, 0xffba],  # 0x87:  1111111110111010 #
    [16, 0xffbb],  # 0x88:  1111111110111011 #
    [16, 0xffbc],  # 0x89:  1111111110111100 #
    [16, 0xffbd],  # 0x8a:  1111111110111101 #
    [0, 0x0000],  # 0x8b:                   #
    [0, 0x0000],  # 0x8c:                   #
    [0, 0x0000],  # 0x8d:                   #
    [0, 0x0000],  # 0x8e:                   #
    [0, 0x0000],  # 0x8f:                   #
    [0, 0x0000],  # 0x90:                   #
    [9, 0x01f9],  # 0x91:         111111001 #
    [16, 0xffbe],  # 0x92:  1111111110111110 #
    [16, 0xffbf],  # 0x93:  1111111110111111 #
    [16, 0xffc0],  # 0x94:  1111111111000000 #
    [16, 0xffc1],  # 0x95:  1111111111000001 #
    [16, 0xffc2],  # 0x96:  1111111111000010 #
    [16, 0xffc3],  # 0x97:  1111111111000011 #
    [16, 0xffc4],  # 0x98:  1111111111000100 #
    [16, 0xffc5],  # 0x99:  1111111111000101 #
    [16, 0xffc6],  # 0x9a:  1111111111000110 #
    [0, 0x0000],  # 0x9b:                   #
    [0, 0x0000],  # 0x9c:                   #
    [0, 0x0000],  # 0x9d:                   #
    [0, 0x0000],  # 0x9e:                   #
    [0, 0x0000],  # 0x9f:                   #
    [0, 0x0000],  # 0xa0:                   #
    [9, 0x01fa],  # 0xa1:         111111010 #
    [16, 0xffc7],  # 0xa2:  1111111111000111 #
    [16, 0xffc8],  # 0xa3:  1111111111001000 #
    [16, 0xffc9],  # 0xa4:  1111111111001001 #
    [16, 0xffca],  # 0xa5:  1111111111001010 #
    [16, 0xffcb],  # 0xa6:  1111111111001011 #
    [16, 0xffcc],  # 0xa7:  1111111111001100 #
    [16, 0xffcd],  # 0xa8:  1111111111001101 #
    [16, 0xffce],  # 0xa9:  1111111111001110 #
    [16, 0xffcf],  # 0xaa:  1111111111001111 #
    [0, 0x0000],  # 0xab:                   #
    [0, 0x0000],  # 0xac:                   #
    [0, 0x0000],  # 0xad:                   #
    [0, 0x0000],  # 0xae:                   #
    [0, 0x0000],  # 0xaf:                   #
    [0, 0x0000],  # 0xb0:                   #
    [10, 0x03f9],  # 0xb1:        1111111001 #
    [16, 0xffd0],  # 0xb2:  1111111111010000 #
    [16, 0xffd1],  # 0xb3:  1111111111010001 #
    [16, 0xffd2],  # 0xb4:  1111111111010010 #
    [16, 0xffd3],  # 0xb5:  1111111111010011 #
    [16, 0xffd4],  # 0xb6:  1111111111010100 #
    [16, 0xffd5],  # 0xb7:  1111111111010101 #
    [16, 0xffd6],  # 0xb8:  1111111111010110 #
    [16, 0xffd7],  # 0xb9:  1111111111010111 #
    [16, 0xffd8],  # 0xba:  1111111111011000 #
    [0, 0x0000],  # 0xbb:                   #
    [0, 0x0000],  # 0xbc:                   #
    [0, 0x0000],  # 0xbd:                   #
    [0, 0x0000],  # 0xbe:                   #
    [0, 0x0000],  # 0xbf:                   #
    [0, 0x0000],  # 0xc0:                   #
    [10, 0x03fa],  # 0xc1:        1111111010 #
    [16, 0xffd9],  # 0xc2:  1111111111011001 #
    [16, 0xffda],  # 0xc3:  1111111111011010 #
    [16, 0xffdb],  # 0xc4:  1111111111011011 #
    [16, 0xffdc],  # 0xc5:  1111111111011100 #
    [16, 0xffdd],  # 0xc6:  1111111111011101 #
    [16, 0xffde],  # 0xc7:  1111111111011110 #
    [16, 0xffdf],  # 0xc8:  1111111111011111 #
    [16, 0xffe0],  # 0xc9:  1111111111100000 #
    [16, 0xffe1],  # 0xca:  1111111111100001 #
    [0, 0x0000],  # 0xcb:                   #
    [0, 0x0000],  # 0xcc:                   #
    [0, 0x0000],  # 0xcd:                   #
    [0, 0x0000],  # 0xce:                   #
    [0, 0x0000],  # 0xcf:                   #
    [0, 0x0000],  # 0xd0:                   #
    [11, 0x07f8],  # 0xd1:       11111111000 #
    [16, 0xffe2],  # 0xd2:  1111111111100010 #
    [16, 0xffe3],  # 0xd3:  1111111111100011 #
    [16, 0xffe4],  # 0xd4:  1111111111100100 #
    [16, 0xffe5],  # 0xd5:  1111111111100101 #
    [16, 0xffe6],  # 0xd6:  1111111111100110 #
    [16, 0xffe7],  # 0xd7:  1111111111100111 #
    [16, 0xffe8],  # 0xd8:  1111111111101000 #
    [16, 0xffe9],  # 0xd9:  1111111111101001 #
    [16, 0xffea],  # 0xda:  1111111111101010 #
    [0, 0x0000],  # 0xdb:                   #
    [0, 0x0000],  # 0xdc:                   #
    [0, 0x0000],  # 0xdd:                   #
    [0, 0x0000],  # 0xde:                   #
    [0, 0x0000],  # 0xdf:                   #
    [0, 0x0000],  # 0xe0:                   #
    [16, 0xffeb],  # 0xe1:  1111111111101011 #
    [16, 0xffec],  # 0xe2:  1111111111101100 #
    [16, 0xffed],  # 0xe3:  1111111111101101 #
    [16, 0xffee],  # 0xe4:  1111111111101110 #
    [16, 0xffef],  # 0xe5:  1111111111101111 #
    [16, 0xfff0],  # 0xe6:  1111111111110000 #
    [16, 0xfff1],  # 0xe7:  1111111111110001 #
    [16, 0xfff2],  # 0xe8:  1111111111110010 #
    [16, 0xfff3],  # 0xe9:  1111111111110011 #
    [16, 0xfff4],  # 0xea:  1111111111110100 #
    [0, 0x0000],  # 0xeb:                   #
    [0, 0x0000],  # 0xec:                   #
    [0, 0x0000],  # 0xed:                   #
    [0, 0x0000],  # 0xee:                   #
    [0, 0x0000],  # 0xef:                   #
    [11, 0x07f9],  # 0xf0:       11111111001 #
    [16, 0xfff5],  # 0xf1:  1111111111110101 #
    [16, 0xfff6],  # 0xf2:  1111111111110110 #
    [16, 0xfff7],  # 0xf3:  1111111111110111 #
    [16, 0xfff8],  # 0xf4:  1111111111111000 #
    [16, 0xfff9],  # 0xf5:  1111111111111001 #
    [16, 0xfffa],  # 0xf6:  1111111111111010 #
    [16, 0xfffb],  # 0xf7:  1111111111111011 #
    [16, 0xfffc],  # 0xf8:  1111111111111100 #
    [16, 0xfffd],  # 0xf9:  1111111111111101 #
    [16, 0xfffe],  # 0xfa:  1111111111111110 #
    [0, 0x0000],  # 0xfb:                   #
    [0, 0x0000],  # 0xfc:                   #
    [0, 0x0000],  # 0xfd:                   #
    [0, 0x0000],  # 0xfe:                   #
    [0, 0x0000],  # 0xff:                   #
]
s_chrom_ac_tree = []
s_chrom_ac = [

    [2, 0x0000],  # 0x00:                00 #
    [2, 0x0001],  # 0x01:                01 #
    [3, 0x0004],  # 0x02:               100 #
    [4, 0x000a],  # 0x03:              1010 #
    [5, 0x0018],  # 0x04:             11000 #
    [5, 0x0019],  # 0x05:             11001 #
    [6, 0x0038],  # 0x06:            111000 #
    [7, 0x0078],  # 0x07:           1111000 #
    [9, 0x01f4],  # 0x08:         111110100 #
    [10, 0x03f6],  # 0x09:        1111110110 #
    [12, 0x0ff4],  # 0x0a:      111111110100 #
    [0, 0x0000],  # 0x0b:                   #
    [0, 0x0000],  # 0x0c:                   #
    [0, 0x0000],  # 0x0d:                   #
    [0, 0x0000],  # 0x0e:                   #
    [0, 0x0000],  # 0x0f:                   #
    [0, 0x0000],  # 0x10:                   #
    [4, 0x000b],  # 0x11:              1011 #
    [6, 0x0039],  # 0x12:            111001 #
    [8, 0x00f6],  # 0x13:          11110110 #
    [9, 0x01f5],  # 0x14:         111110101 #
    [11, 0x07f6],  # 0x15:       11111110110 #
    [12, 0x0ff5],  # 0x16:      111111110101 #
    [16, 0xff88],  # 0x17:  1111111110001000 #
    [16, 0xff89],  # 0x18:  1111111110001001 #
    [16, 0xff8a],  # 0x19:  1111111110001010 #
    [16, 0xff8b],  # 0x1a:  1111111110001011 #
    [0, 0x0000],  # 0x1b:                   #
    [0, 0x0000],  # 0x1c:                   #
    [0, 0x0000],  # 0x1d:                   #
    [0, 0x0000],  # 0x1e:                   #
    [0, 0x0000],  # 0x1f:                   #
    [0, 0x0000],  # 0x20:                   #
    [5, 0x001a],  # 0x21:             11010 #
    [8, 0x00f7],  # 0x22:          11110111 #
    [10, 0x03f7],  # 0x23:        1111110111 #
    [12, 0x0ff6],  # 0x24:      111111110110 #
    [15, 0x7fc2],  # 0x25:   111111111000010 #
    [16, 0xff8c],  # 0x26:  1111111110001100 #
    [16, 0xff8d],  # 0x27:  1111111110001101 #
    [16, 0xff8e],  # 0x28:  1111111110001110 #
    [16, 0xff8f],  # 0x29:  1111111110001111 #
    [16, 0xff90],  # 0x2a:  1111111110010000 #
    [0, 0x0000],  # 0x2b:                   #
    [0, 0x0000],  # 0x2c:                   #
    [0, 0x0000],  # 0x2d:                   #
    [0, 0x0000],  # 0x2e:                   #
    [0, 0x0000],  # 0x2f:                   #
    [0, 0x0000],  # 0x30:                   #
    [5, 0x001b],  # 0x31:             11011 #
    [8, 0x00f8],  # 0x32:          11111000 #
    [10, 0x03f8],  # 0x33:        1111111000 #
    [12, 0x0ff7],  # 0x34:      111111110111 #
    [16, 0xff91],  # 0x35:  1111111110010001 #
    [16, 0xff92],  # 0x36:  1111111110010010 #
    [16, 0xff93],  # 0x37:  1111111110010011 #
    [16, 0xff94],  # 0x38:  1111111110010100 #
    [16, 0xff95],  # 0x39:  1111111110010101 #
    [16, 0xff96],  # 0x3a:  1111111110010110 #
    [0, 0x0000],  # 0x3b:                   #
    [0, 0x0000],  # 0x3c:                   #
    [0, 0x0000],  # 0x3d:                   #
    [0, 0x0000],  # 0x3e:                   #
    [0, 0x0000],  # 0x3f:                   #
    [0, 0x0000],  # 0x40:                   #
    [6, 0x003a],  # 0x41:            111010 #
    [9, 0x01f6],  # 0x42:         111110110 #
    [16, 0xff97],  # 0x43:  1111111110010111 #
    [16, 0xff98],  # 0x44:  1111111110011000 #
    [16, 0xff99],  # 0x45:  1111111110011001 #
    [16, 0xff9a],  # 0x46:  1111111110011010 #
    [16, 0xff9b],  # 0x47:  1111111110011011 #
    [16, 0xff9c],  # 0x48:  1111111110011100 #
    [16, 0xff9d],  # 0x49:  1111111110011101 #
    [16, 0xff9e],  # 0x4a:  1111111110011110 #
    [0, 0x0000],  # 0x4b:                   #
    [0, 0x0000],  # 0x4c:                   #
    [0, 0x0000],  # 0x4d:                   #
    [0, 0x0000],  # 0x4e:                   #
    [0, 0x0000],  # 0x4f:                   #
    [0, 0x0000],  # 0x50:                   #
    [6, 0x003b],  # 0x51:            111011 #
    [10, 0x03f9],  # 0x52:        1111111001 #
    [16, 0xff9f],  # 0x53:  1111111110011111 #
    [16, 0xffa0],  # 0x54:  1111111110100000 #
    [16, 0xffa1],  # 0x55:  1111111110100001 #
    [16, 0xffa2],  # 0x56:  1111111110100010 #
    [16, 0xffa3],  # 0x57:  1111111110100011 #
    [16, 0xffa4],  # 0x58:  1111111110100100 #
    [16, 0xffa5],  # 0x59:  1111111110100101 #
    [16, 0xffa6],  # 0x5a:  1111111110100110 #
    [0, 0x0000],  # 0x5b:                   #
    [0, 0x0000],  # 0x5c:                   #
    [0, 0x0000],  # 0x5d:                   #
    [0, 0x0000],  # 0x5e:                   #
    [0, 0x0000],  # 0x5f:                   #
    [0, 0x0000],  # 0x60:                   #
    [7, 0x0079],  # 0x61:           1111001 #
    [11, 0x07f7],  # 0x62:       11111110111 #
    [16, 0xffa7],  # 0x63:  1111111110100111 #
    [16, 0xffa8],  # 0x64:  1111111110101000 #
    [16, 0xffa9],  # 0x65:  1111111110101001 #
    [16, 0xffaa],  # 0x66:  1111111110101010 #
    [16, 0xffab],  # 0x67:  1111111110101011 #
    [16, 0xffac],  # 0x68:  1111111110101100 #
    [16, 0xffad],  # 0x69:  1111111110101101 #
    [16, 0xffae],  # 0x6a:  1111111110101110 #
    [0, 0x0000],  # 0x6b:                   #
    [0, 0x0000],  # 0x6c:                   #
    [0, 0x0000],  # 0x6d:                   #
    [0, 0x0000],  # 0x6e:                   #
    [0, 0x0000],  # 0x6f:                   #
    [0, 0x0000],  # 0x70:                   #
    [7, 0x007a],  # 0x71:           1111010 #
    [11, 0x07f8],  # 0x72:       11111111000 #
    [16, 0xffaf],  # 0x73:  1111111110101111 #
    [16, 0xffb0],  # 0x74:  1111111110110000 #
    [16, 0xffb1],  # 0x75:  1111111110110001 #
    [16, 0xffb2],  # 0x76:  1111111110110010 #
    [16, 0xffb3],  # 0x77:  1111111110110011 #
    [16, 0xffb4],  # 0x78:  1111111110110100 #
    [16, 0xffb5],  # 0x79:  1111111110110101 #
    [16, 0xffb6],  # 0x7a:  1111111110110110 #
    [0, 0x0000],  # 0x7b:                   #
    [0, 0x0000],  # 0x7c:                   #
    [0, 0x0000],  # 0x7d:                   #
    [0, 0x0000],  # 0x7e:                   #
    [0, 0x0000],  # 0x7f:                   #
    [0, 0x0000],  # 0x80:                   #
    [8, 0x00f9],  # 0x81:          11111001 #
    [16, 0xffb7],  # 0x82:  1111111110110111 #
    [16, 0xffb8],  # 0x83:  1111111110111000 #
    [16, 0xffb9],  # 0x84:  1111111110111001 #
    [16, 0xffba],  # 0x85:  1111111110111010 #
    [16, 0xffbb],  # 0x86:  1111111110111011 #
    [16, 0xffbc],  # 0x87:  1111111110111100 #
    [16, 0xffbd],  # 0x88:  1111111110111101 #
    [16, 0xffbe],  # 0x89:  1111111110111110 #
    [16, 0xffbf],  # 0x8a:  1111111110111111 #
    [0, 0x0000],  # 0x8b:                   #
    [0, 0x0000],  # 0x8c:                   #
    [0, 0x0000],  # 0x8d:                   #
    [0, 0x0000],  # 0x8e:                   #
    [0, 0x0000],  # 0x8f:                   #
    [0, 0x0000],  # 0x90:                   #
    [9, 0x01f7],  # 0x91:         111110111 #
    [16, 0xffc0],  # 0x92:  1111111111000000 #
    [16, 0xffc1],  # 0x93:  1111111111000001 #
    [16, 0xffc2],  # 0x94:  1111111111000010 #
    [16, 0xffc3],  # 0x95:  1111111111000011 #
    [16, 0xffc4],  # 0x96:  1111111111000100 #
    [16, 0xffc5],  # 0x97:  1111111111000101 #
    [16, 0xffc6],  # 0x98:  1111111111000110 #
    [16, 0xffc7],  # 0x99:  1111111111000111 #
    [16, 0xffc8],  # 0x9a:  1111111111001000 #
    [0, 0x0000],  # 0x9b:                   #
    [0, 0x0000],  # 0x9c:                   #
    [0, 0x0000],  # 0x9d:                   #
    [0, 0x0000],  # 0x9e:                   #
    [0, 0x0000],  # 0x9f:                   #
    [0, 0x0000],  # 0xa0:                   #
    [9, 0x01f8],  # 0xa1:         111111000 #
    [16, 0xffc9],  # 0xa2:  1111111111001001 #
    [16, 0xffca],  # 0xa3:  1111111111001010 #
    [16, 0xffcb],  # 0xa4:  1111111111001011 #
    [16, 0xffcc],  # 0xa5:  1111111111001100 #
    [16, 0xffcd],  # 0xa6:  1111111111001101 #
    [16, 0xffce],  # 0xa7:  1111111111001110 #
    [16, 0xffcf],  # 0xa8:  1111111111001111 #
    [16, 0xffd0],  # 0xa9:  1111111111010000 #
    [16, 0xffd1],  # 0xaa:  1111111111010001 #
    [0, 0x0000],  # 0xab:                   #
    [0, 0x0000],  # 0xac:                   #
    [0, 0x0000],  # 0xad:                   #
    [0, 0x0000],  # 0xae:                   #
    [0, 0x0000],  # 0xaf:                   #
    [0, 0x0000],  # 0xb0:                   #
    [9, 0x01f9],  # 0xb1:         111111001 #
    [16, 0xffd2],  # 0xb2:  1111111111010010 #
    [16, 0xffd3],  # 0xb3:  1111111111010011 #
    [16, 0xffd4],  # 0xb4:  1111111111010100 #
    [16, 0xffd5],  # 0xb5:  1111111111010101 #
    [16, 0xffd6],  # 0xb6:  1111111111010110 #
    [16, 0xffd7],  # 0xb7:  1111111111010111 #
    [16, 0xffd8],  # 0xb8:  1111111111011000 #
    [16, 0xffd9],  # 0xb9:  1111111111011001 #
    [16, 0xffda],  # 0xba:  1111111111011010 #
    [0, 0x0000],  # 0xbb:                   #
    [0, 0x0000],  # 0xbc:                   #
    [0, 0x0000],  # 0xbd:                   #
    [0, 0x0000],  # 0xbe:                   #
    [0, 0x0000],  # 0xbf:                   #
    [0, 0x0000],  # 0xc0:                   #
    [9, 0x01fa],  # 0xc1:         111111010 #
    [16, 0xffdb],  # 0xc2:  1111111111011011 #
    [16, 0xffdc],  # 0xc3:  1111111111011100 #
    [16, 0xffdd],  # 0xc4:  1111111111011101 #
    [16, 0xffde],  # 0xc5:  1111111111011110 #
    [16, 0xffdf],  # 0xc6:  1111111111011111 #
    [16, 0xffe0],  # 0xc7:  1111111111100000 #
    [16, 0xffe1],  # 0xc8:  1111111111100001 #
    [16, 0xffe2],  # 0xc9:  1111111111100010 #
    [16, 0xffe3],  # 0xca:  1111111111100011 #
    [0, 0x0000],  # 0xcb:                   #
    [0, 0x0000],  # 0xcc:                   #
    [0, 0x0000],  # 0xcd:                   #
    [0, 0x0000],  # 0xce:                   #
    [0, 0x0000],  # 0xcf:                   #
    [0, 0x0000],  # 0xd0:                   #
    [11, 0x07f9],  # 0xd1:       11111111001 #
    [16, 0xffe4],  # 0xd2:  1111111111100100 #
    [16, 0xffe5],  # 0xd3:  1111111111100101 #
    [16, 0xffe6],  # 0xd4:  1111111111100110 #
    [16, 0xffe7],  # 0xd5:  1111111111100111 #
    [16, 0xffe8],  # 0xd6:  1111111111101000 #
    [16, 0xffe9],  # 0xd7:  1111111111101001 #
    [16, 0xffea],  # 0xd8:  1111111111101010 #
    [16, 0xffeb],  # 0xd9:  1111111111101011 #
    [16, 0xffec],  # 0xda:  1111111111101100 #
    [0, 0x0000],  # 0xdb:                   #
    [0, 0x0000],  # 0xdc:                   #
    [0, 0x0000],  # 0xdd:                   #
    [0, 0x0000],  # 0xde:                   #
    [0, 0x0000],  # 0xdf:                   #
    [0, 0x0000],  # 0xe0:                   #
    [14, 0x3fe0],  # 0xe1:    11111111100000 #
    [16, 0xffed],  # 0xe2:  1111111111101101 #
    [16, 0xffee],  # 0xe3:  1111111111101110 #
    [16, 0xffef],  # 0xe4:  1111111111101111 #
    [16, 0xfff0],  # 0xe5:  1111111111110000 #
    [16, 0xfff1],  # 0xe6:  1111111111110001 #
    [16, 0xfff2],  # 0xe7:  1111111111110010 #
    [16, 0xfff3],  # 0xe8:  1111111111110011 #
    [16, 0xfff4],  # 0xe9:  1111111111110100 #
    [16, 0xfff5],  # 0xea:  1111111111110101 #
    [0, 0x0000],  # 0xeb:                   #
    [0, 0x0000],  # 0xec:                   #
    [0, 0x0000],  # 0xed:                   #
    [0, 0x0000],  # 0xee:                   #
    [0, 0x0000],  # 0xef:                   #
    [10, 0x03fa],  # 0xf0:        1111111010 #
    [15, 0x7fc3],  # 0xf1:   111111111000011 #
    [16, 0xfff6],  # 0xf2:  1111111111110110 #
    [16, 0xfff7],  # 0xf3:  1111111111110111 #
    [16, 0xfff8],  # 0xf4:  1111111111111000 #
    [16, 0xfff9],  # 0xf5:  1111111111111001 #
    [16, 0xfffa],  # 0xf6:  1111111111111010 #
    [16, 0xfffb],  # 0xf7:  1111111111111011 #
    [16, 0xfffc],  # 0xf8:  1111111111111100 #
    [16, 0xfffd],  # 0xf9:  1111111111111101 #
    [16, 0xfffe],  # 0xfa:  1111111111111110 #
    [0, 0x0000],  # 0xfb:                   #
    [0, 0x0000],  # 0xfc:                   #
    [0, 0x0000],  # 0xfd:                   #
    [0, 0x0000],  # 0xfe:                   #
    [0, 0x0000]  # 0xff:                   #
]

log_flag = False
def init():
    global s_lumin_ac_tree
    global s_lumin_dc_tree
    global s_chrom_ac_tree
    global s_chrom_dc_tree
    s_lumin_ac_tree = []
    for length, code in s_lumin_ac:
        if length != 0:
            tmp = bitarray.bitarray()
            tmp.frombytes(pwn.p16(code, endian='big'))
            tmp = tmp[-length:]
            s_lumin_ac_tree.append(tmp)
        else:
            s_lumin_ac_tree.append(bitarray.bitarray())

    s_lumin_dc_tree = []
    for length, code in s_lumin_dc:
        if length != 0:
            tmp = bitarray.bitarray()
            tmp.frombytes(pwn.p16(code, endian='big'))
            tmp = tmp[-length:]
            s_lumin_dc_tree.append(tmp)
        else:
            s_lumin_dc_tree.append(bitarray.bitarray())

    s_chrom_ac_tree = []
    for length, code in s_chrom_ac:
        if length != 0:
            tmp = bitarray.bitarray()
            tmp.frombytes(pwn.p16(code, endian='big'))
            tmp = tmp[-length:]
            s_chrom_ac_tree.append(tmp)
        else:
            s_chrom_ac_tree.append(bitarray.bitarray())

    s_chrom_dc_tree = []
    for length, code in s_chrom_dc:
        if length != 0:
            tmp = bitarray.bitarray()
            tmp.frombytes(pwn.p16(code, endian='big'))
            tmp = tmp[-length:]
            s_chrom_dc_tree.append(tmp)
        else:
            s_chrom_dc_tree.append(bitarray.bitarray())


def add_tree(tree, l, deep):
    if len(tree['code']) == deep:
        tree['code'] = None
        return
    tree_l = {'len': -1, 'left': {}, 'right': {}, 'code': tree['code'] + '1'}
    i = 0
    while i < len(l):
        if l[i] == tree_l['code']:
            tree_l['len'] = i
            break
        i += 1
    if i == len(l):
        add_tree(tree_l, l, deep)
    tree_r = {'len': -1, 'left': {}, 'right': {}, 'code': tree['code'] + '0'}
    i = 0
    while i < len(l):
        if l[i] == tree_r['code']:
            tree_r['len'] = i
            break
        i += 1
    if i == len(l):
        add_tree(tree_r, l, deep)
    tree['left'] = tree_l
    tree['right'] = tree_r


def decode_tree(l, deep):
    tree = {"len": -1, "left": {}, 'right': {}, 'code': bitarray.bitarray()}
    add_tree(tree, l, deep)
    return tree


init()
fp = open('./a')

data = fp.read()
head = data[:0x36]
data = data[0x36:]

b = bitarray.bitarray()
b.frombytes(data)

b = b.to01()

# for test
# b = bitarray.bitarray('01111000000000010111100010100000')
# b = b.to01()

s_lumin_dc_tree = decode_tree(s_lumin_dc_tree, 10)
s_lumin_ac_tree = decode_tree(s_lumin_ac_tree, 17)
# print s_lumin_ac_tree
s_chrom_dc_tree = decode_tree(s_chrom_dc_tree, 10)
s_chrom_ac_tree = decode_tree(s_chrom_ac_tree, 17)


def get_bit(length):
    global b
    # print b
    if len(b) < length:
        raise Exception()
    b2 = b[:length]
    b = b[length:]
    return b2


# TODO test
PREV = [0, 0, 0]


def decode_block_dc(tree):
    while True:
        bit = get_bit(1)
        if bit == '1':
            tree = tree["left"]
        else:
            tree = tree['right']
        if tree['len'] != -1:
            break
    if tree['len'] == 0:
        return 0
    a = get_bit(tree['len'])
    a = bitarray.bitarray(a)
    if not a[0]:
        a = ~a
        return -int(a.to01(), 2)
    else:
        return int(a.to01(), 2)


def decode_dc(is_y):
    if is_y == 0:
        tree = s_lumin_dc_tree
    else:
        tree = s_chrom_dc_tree
    diff = decode_block_dc(tree)
    zz0 = diff + PREV[is_y]
    PREV[is_y] = zz0
    return zz0


def decode_block_ac(tree):
    while True:
        bit = get_bit(1)
        if bit == '1':
            tree = tree["left"]
        else:
            tree = tree['right']
        if tree['len'] != -1:
            break
    if tree['len'] == 0:
        return 0, 0
    if tree['len'] == 240:
        return 15, 0
    a = get_bit(tree['len'] % 16)
    a = bitarray.bitarray(a)
    if not a[0]:
        a = ~a
        a = -int(a.to01(), 2)
    else:
        a = int(a.to01(), 2)
    return tree['len'] / 16, a


def decode_ac(is_y):
    zz = []
    if is_y == 0:
        tree = s_lumin_ac_tree
    else:
        tree = s_chrom_ac_tree
    while True:
        zrl, num = decode_block_ac(tree)
        if zrl == 0 and num == 0:
            for _ in range(63 - len(zz)):
                zz.append(0)
            return zz
        if num == 0 and zrl == 15:
            for _ in range(16):
                zz.append(0)
            continue
        for _ in range(zrl):
            zz.append(0)
        zz.append(num)


# int z_scan(int in[8][8], int out[63]) {
#     int i, j, t, flag = 1, c = 0;
#     for (t = 1; t < 8; t++) {
#         if (flag) {
#             for (i = t; i >= 0; i--) {
#                 out[c++] = in[t - i][i];
#             }
#             flag = 0;
#         } else {
#             for (i = t; i >= 0; i--) {
#                 out[c++] = in[i][t - i];
#             }
#             flag = 1;
#         }
#     }
#     for (t = 1, flag = 1; t < 8; t++) {
#         if (flag) {
#             for (i = t; i < 8; i++) {
#                 out[c++] = in[7 + t - i][i];
#             }
#             flag = 0;
#         } else {
#             for (i = t; i < 8; i++) {
#                 out[c++] = in[i][7 + t - i];
#             }
#             flag = 1;
#         }
#     }
#     return in[0][0];
# }


def d_z_scan(zz0, zz):
    flag = True
    c = 0
    out = []
    for i in range(8):
        o = []
        for j in range(8):
            o.append(0)
        out.append(o)
    out[0][0] = zz0

    for t in range(1, 8):
        if flag:
            for i in range(t, -1, -1):
                out[t - i][i] = zz[c]
                c += 1
            flag = False
        else:
            for i in range(t, -1, -1):
                out[i][t - i] = zz[c]
                c += 1
            flag = True
    flag = True
    for t in range(1, 8):
        if flag:
            for i in range(t, 8):
                out[7 + t - i][i] = zz[c]
                c += 1
            flag = False
        else:
            for i in range(t, 8):
                out[i][7 + t - i] = zz[c]
            flag = True

    return out


YQut = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14,
        17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49,
        64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99]
UQut = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47,
        66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]


def d_quantization(block, is_y):
    if is_y == 0:
        table = YQut
    else:
        table = UQut
    for i in range(8):
        for j in range(8):
            block[i][j] *= (table[i * 8 + j] * 0.5)
    return block


def IDCT(block, is_y):
    out = []
    for i in range(8):
        o = []
        for j in range(8):
            o.append(0)
        out.append(o)
    for m in range(8):
        for n in range(8):
            tmp = 0
            for k in range(8):
                for l in range(8):
                    ck = 0.7071067811865476 if k == 0 else 1.0
                    cl = 0.7071067811865476 if l == 0 else 1.0
                    tmp += ck * cl * block[k][l] * cos(((2 * m + 1) * pi * k) / 16.0) * cos(
                        ((2 * n + 1) * pi * l) / 16.0)
            tmp /= 4.0
            out[m][n] = tmp
    if is_y == 0:
        for i in range(8):
            for j in range(8):
                out[i][j] += 128
    return out


def decode_block(is_y):
    zz0 = decode_dc(is_y)
    zz = decode_ac(is_y)
    block = d_z_scan(zz0, zz)
    block = d_quantization(block, is_y)
    return IDCT(block, is_y)


dd = bytearray(0x400 * 0x400 * 3)
# print decode_block(0)
for i in range(128):
    print i
    for j in range(128):
        block1 = decode_block(0)
        block2 = decode_block(1)
        block3 = decode_block(2)

        blockR = []
        blockG = []
        blockB = []
        for m in range(8):
            o1 = []
            o2 = []
            o3 = []
            for n in range(8):
                o1.append(0)
                o2.append(0)
                o3.append(0)
            blockR.append(o1)
            blockG.append(o2)
            blockB.append(o3)

        for m in range(8):
            for n in range(8):
                tmp = block1[m][n] + 1.402 * block3[m][m]
                tmp = int(round(tmp))
                if tmp < 0:
                    tmp = 0
                elif tmp > 255:
                    tmp = 255
                blockR[m][n] = tmp

                tmp = block1[m][n] - 0.34414 * block2[m][m] - 0.71414 * block3[m][n]
                tmp = int(round(tmp))
                if tmp < 0:
                    tmp = 0
                elif tmp > 255:
                    tmp = 255
                blockG[m][n] = tmp

                tmp = block1[m][n] + 1.772 * block2[m][m]
                tmp = int(round(tmp))
                if tmp < 0:
                    tmp = 0
                elif tmp > 255:
                    tmp = 255
                blockB[m][n] = tmp
        for m in range(8):
            for n in range(8):
                dd[(i * 8 + m) * 0xc00 + (j * 8 + n) * 3 + 0] = blockR[m][n]
                dd[(i * 8 + m) * 0xc00 + (j * 8 + n) * 3 + 1] = blockG[m][n]
                dd[(i * 8 + m) * 0xc00 + (j * 8 + n) * 3 + 2] = blockB[m][n]
    PREV[0] = 0
    PREV[1] = 0
    PREV[2] = 0

fp = open('/tmp/a.bmp', 'w')
fp.write(head)
fp.write(str(dd))
